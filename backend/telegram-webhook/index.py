import json
import os
from typing import Dict, Any

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç Telegram –±–æ—Ç–∞
    Args: event - –æ–±—ä–µ–∫—Ç —Å httpMethod, body; context - –æ–±—ä–µ–∫—Ç —Å request_id
    Returns: HTTP –æ—Ç–≤–µ—Ç –¥–ª—è Telegram
    '''
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Bot token not configured'})
        }
    
    body_str = event.get('body', '{}')
    update = json.loads(body_str)
    
    if 'message' not in update:
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'ok': True})
        }
    
    message = update['message']
    chat_id = message['chat']['id']
    text = message.get('text', '')
    
    response_text = process_command(text)
    
    send_message(bot_token, chat_id, response_text)
    
    return {
        'statusCode': 200,
        'headers': {'Content-Type': 'application/json'},
        'isBase64Encoded': False,
        'body': json.dumps({'ok': True})
    }


def process_command(text: str) -> str:
    '''–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'''
    text_lower = text.lower().strip()
    
    if text_lower == '/start':
        return (
            'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à Telegram –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n'
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
            '/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n'
            '/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
            '/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n'
            '/faq - —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã'
        )
    
    if text_lower == '/help':
        return (
            'üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n'
            '/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n'
            '/menu - –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
            '/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n'
            '/faq - —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n'
            '–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: support@bot.com'
        )
    
    if text_lower == '/menu':
        return (
            'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n'
            '1Ô∏è‚É£ /help - –°–ø—Ä–∞–≤–∫–∞\n'
            '2Ô∏è‚É£ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n'
            '3Ô∏è‚É£ /faq - FAQ\n'
            '4Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è'
        )
    
    if text_lower == '/settings':
        return (
            '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n'
            'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã\n'
            'üîä –ó–≤—É–∫: –≤–∫–ª—é—á–µ–Ω\n'
            'üìß –†–∞—Å—Å—ã–ª–∫–∏: –≤–∫–ª—é—á–µ–Ω—ã\n\n'
            '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ –±–æ—Ç–∞'
        )
    
    if text_lower == '/faq':
        return (
            '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n'
            '1. –ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º?\n'
            '   ‚Üí –ù–∞–ø–∏—à–∏—Ç–µ /start\n\n'
            '2. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å?\n'
            '   ‚Üí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help\n\n'
            '3. –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?\n'
            '   ‚Üí –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /settings\n\n'
            '4. –ö–∞–∫ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫?\n'
            '   ‚Üí –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings'
        )
    
    return f'‚úÖ –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{text}"\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.'


def send_message(bot_token: str, chat_id: int, text: str) -> None:
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API'''
    import urllib.request
    import urllib.parse
    
    url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
    
    data = urllib.parse.urlencode({
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }).encode('utf-8')
    
    req = urllib.request.Request(url, data=data, method='POST')
    req.add_header('Content-Type', 'application/x-www-form-urlencoded')
    
    urllib.request.urlopen(req)
